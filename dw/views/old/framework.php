<?php

$this->title = 'О микрофреймворке DW Framework';

?>
<div class="box">
    <div class="infobox">
        <div class="infocontent">
            <h2>Реализовано</h2>
            <ul class="base">
                <li>
                    Автоподгрузка классов
                </li>
                <li>
                    Роутинг
                </li>
                <li>
                    Работа с MySQL
                </li>
                <li>
                    Контроллеры
                </li>
                <li>
                    Модели
                </li>
                <li>
                    Виды
                </li>
                <li>
                    Кэширование html данных
                </li>
                <li>
                    Кэширование результатов SQL запросов
                </li>
                <li>
                    Обработка исключений
                </li>
                <li>
                    Класс-валидатор для стандартных проверок входящих данных на стороне php
                </li>
                <li>
                    Работа с сессиями
                </li>
                <li>
                    Работа с куками
                </li>
                <li>
                    Пагинация
                </li>
            </ul>
        </div>
    </div>
    <div class="infobox">
        <div class="infocontent">
            <h2>Безопасность</h2>
            <ul class="base">
                <li>
                    Защита от SQL-инъекций
                </li>
                <li>
                    Защита от CSRF-атак (пока реализован простейший вариант защиты, когда на всю сессию генерируется один токен)
                </li>
            </ul>
        </div>
    </div>
    <div class="infobox">
        <div class="infocontent">
            <h2>В планах</h2>
            <ul class="base">
                <li>
                    Капча
                </li>
                <li>
                    Регистрация и авторизация
                </li>
                <li>
                    JS-скрипт для стандартных проверок вводимых данных на стороне фротн-энда
                </li>
                <li>
                    Защита от спама от неавторизованных пользователей (например, перебор логинов и паролей в форме логина)
                </li>
                <li>
                    Отправка почты
                </li>
                <li>
                    Замена текущего, простейшего роутинга, на более функциональный
                </li>
                <li>
                    Система шаблонов дизайна и переключение между ними в настройках пользователя (база для этого уже
                    заложена, но реализовать можно будет после создания регистрации)
                </li>
                <li>
                    Система логгирования
                </li>
            </ul>
        </div>
    </div>
</div>

<h1>DW Framework</h1>

<p>
    Занимаясь программированием, в последнее время ощущаю, как меня все больше и больше тянет на минимализм. Все
    больше раздражает, когда даже для незначительных целей используются громоздкие библиотеки и фреймворки.
    Пользоваться ими конечно продуктивно и нужно в ежедневной работе. Но... иногда хочется удовлетворить свои
    внутренние идеалы (или тараканы, с какой стороны посмотреть) минимализма.
</p>

<p>
    DW Framework &#150; попытка создать микрофтеймворк, с базовым функционалом, и в тоже время с
    минимальным количеством кода и максимальной производительностью.
</p>

<p>
    Yii2 в базовой комплектации, чтобы отдать главную статическую страницу съедает 2.5 мб памяти. Если вам
    эти цифры ничего не говорят &#150; то скорее всего вам будет непонятна моя позиция.
</p>

<p>
    При написании DW Framework используются следующие подходы:
</p>

<ul class="base">
    <li>
        <b>Минимализм кода</b> &#150; если один и тот же функционал, можно реализовать через 10 000 строк кода готовой библиотеки,
        или за 200 строк своего кода, который будет делать только то, что нужно &#150; зачем лишние тысячи строк? (именно
        по этой причине используется самописная, простейшая обертка для работы с SQL-запросами, а не «тучные» готовые
        библиотеки)
    </li>
    <li>
        <b>Минимализм расхода ресурсов</b> &#150; при разработке считал каждые десятки килобайт расходуемой памяти и милисекунды
        времени выполнения скрипта.
    </li>
    <li>
        <b>Ориентир на производительность</b> &#150; при выборе между «сделать код удобный для программистов» или «сделать
        максимально производительный код» выбирается последнее. Единственное исключение &#150; ООП подход
        (код без объектов будет работать еще быстрее, и ВКонтакте, например, написан как раз без ООП).
    </li>
    <li>
        <b>Не используется Composer</b> &#150; при всем том, что этот менеджер зависимостей является «Best of the
        Best», он, своей простотой, подталкивает программистов на опасную дорожку захламления проекта ненужными зависимостями.
    </li>
</ul>

<h3>P.S.</h3>

<p>
    Разумеется, никого не призываю использовать мой фреймворк для рабочих проектов. Для этих целей есть распространенные
    современные фреймворки. Рассматривайте DW Framework как домашнее баловство.
</p>
